#ifndef SSD1306_EMUL_H_
#define SSD1306_EMUL_H_ 1

#define uint8 unsigned char

//if defined char range 0x20-0x7F otherwise 0x20-0xFF
#define FONT_END7F
#define FONT_START (0x20) //first character

#define FONT_WIDTH (6)
#define FONT_HEIGHT (8)

const uint8_t font_PGM[] =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x20
        0x04, 0x0E, 0x0E, 0x04, 0x04, 0x00, 0x04, 0x00, // 0x21
        0x1B, 0x1B, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x22
        0x00, 0x0A, 0x1F, 0x0A, 0x0A, 0x1F, 0x0A, 0x00, // 0x23
        0x08, 0x0E, 0x10, 0x0C, 0x02, 0x1C, 0x04, 0x00, // 0x24
        0x19, 0x19, 0x02, 0x04, 0x08, 0x13, 0x13, 0x00, // 0x25
        0x08, 0x14, 0x14, 0x08, 0x15, 0x12, 0x0D, 0x00, // 0x26
        0x0C, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x27
        0x04, 0x08, 0x08, 0x08, 0x08, 0x08, 0x04, 0x00, // 0x28
        0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x00, // 0x29
        0x00, 0x0A, 0x0E, 0x1F, 0x0E, 0x0A, 0x00, 0x00, // 0x2A
        0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00, 0x00, // 0x2B
        0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x08, // 0x2C
        0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, // 0x2D
        0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00, // 0x2E
        0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00, 0x00, // 0x2F
        0x0E, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0E, 0x00, // 0x30
        0x04, 0x0C, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, // 0x31
        0x0E, 0x11, 0x01, 0x06, 0x08, 0x10, 0x1F, 0x00, // 0x32
        0x0E, 0x11, 0x01, 0x0E, 0x01, 0x11, 0x0E, 0x00, // 0x33
        0x02, 0x06, 0x0A, 0x12, 0x1F, 0x02, 0x02, 0x00, // 0x34
        0x1F, 0x10, 0x10, 0x1E, 0x01, 0x11, 0x0E, 0x00, // 0x35
        0x06, 0x08, 0x10, 0x1E, 0x11, 0x11, 0x0E, 0x00, // 0x36
        0x1F, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08, 0x00, // 0x37
        0x0E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x0E, 0x00, // 0x38
        0x0E, 0x11, 0x11, 0x0F, 0x01, 0x02, 0x0C, 0x00, // 0x39
        0x00, 0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x00, // 0x3A
        0x00, 0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x08, // 0x3B
        0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x00, // 0x3C
        0x00, 0x00, 0x1F, 0x00, 0x00, 0x1F, 0x00, 0x00, // 0x3D
        0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x00, // 0x3E
        0x0E, 0x11, 0x01, 0x06, 0x04, 0x00, 0x04, 0x00, // 0x3F
        0x0E, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0E, 0x00, // 0x40
        0x0E, 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x00, // 0x41
        0x1E, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x1E, 0x00, // 0x42
        0x0E, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0E, 0x00, // 0x43
        0x1E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x00, // 0x44
        0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x1F, 0x00, // 0x45
        0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x10, 0x00, // 0x46
        0x0E, 0x11, 0x10, 0x17, 0x11, 0x11, 0x0F, 0x00, // 0x47
        0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x00, // 0x48
        0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, // 0x49
        0x01, 0x01, 0x01, 0x01, 0x11, 0x11, 0x0E, 0x00, // 0x4A
        0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11, 0x00, // 0x4B
        0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x00, // 0x4C
        0x11, 0x1B, 0x15, 0x11, 0x11, 0x11, 0x11, 0x00, // 0x4D
        0x11, 0x19, 0x15, 0x13, 0x11, 0x11, 0x11, 0x00, // 0x4E
        0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, // 0x4F
        0x1E, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10, 0x00, // 0x50
        0x0E, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0D, 0x00, // 0x51
        0x1E, 0x11, 0x11, 0x1E, 0x12, 0x11, 0x11, 0x00, // 0x52
        0x0E, 0x11, 0x10, 0x0E, 0x01, 0x11, 0x0E, 0x00, // 0x53
        0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, // 0x54
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, // 0x55
        0x11, 0x11, 0x11, 0x11, 0x11, 0x0A, 0x04, 0x00, // 0x56
        0x11, 0x11, 0x15, 0x15, 0x15, 0x15, 0x0A, 0x00, // 0x57
        0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11, 0x00, // 0x58
        0x11, 0x11, 0x11, 0x0A, 0x04, 0x04, 0x04, 0x00, // 0x59
        0x1E, 0x02, 0x04, 0x08, 0x10, 0x10, 0x1E, 0x00, // 0x5A
        0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E, 0x00, // 0x5B
        0x00, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00, // 0x5C
        0x0E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0E, 0x00, // 0x5D
        0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x5E
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, // 0x5F
        0x0C, 0x0C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x60
        0x00, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F, 0x00, // 0x61
        0x10, 0x10, 0x1E, 0x11, 0x11, 0x11, 0x1E, 0x00, // 0x62
        0x00, 0x00, 0x0E, 0x11, 0x10, 0x11, 0x0E, 0x00, // 0x63
        0x01, 0x01, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x00, // 0x64
        0x00, 0x00, 0x0E, 0x11, 0x1E, 0x10, 0x0E, 0x00, // 0x65
        0x06, 0x08, 0x08, 0x1E, 0x08, 0x08, 0x08, 0x00, // 0x66
        0x00, 0x00, 0x0F, 0x11, 0x11, 0x0F, 0x01, 0x0E, // 0x67
        0x10, 0x10, 0x1C, 0x12, 0x12, 0x12, 0x12, 0x00, // 0x68
        0x04, 0x00, 0x04, 0x04, 0x04, 0x04, 0x06, 0x00, // 0x69
        0x02, 0x00, 0x06, 0x02, 0x02, 0x02, 0x12, 0x0C, // 0x6A
        0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12, 0x00, // 0x6B
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x06, 0x00, // 0x6C
        0x00, 0x00, 0x1A, 0x15, 0x15, 0x11, 0x11, 0x00, // 0x6D
        0x00, 0x00, 0x1C, 0x12, 0x12, 0x12, 0x12, 0x00, // 0x6E
        0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0x00, // 0x6F
        0x00, 0x00, 0x1E, 0x11, 0x11, 0x11, 0x1E, 0x10, // 0x70
        0x00, 0x00, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x01, // 0x71
        0x00, 0x00, 0x16, 0x09, 0x08, 0x08, 0x1C, 0x00, // 0x72
        0x00, 0x00, 0x0E, 0x10, 0x0E, 0x01, 0x0E, 0x00, // 0x73
        0x00, 0x08, 0x1E, 0x08, 0x08, 0x0A, 0x04, 0x00, // 0x74
        0x00, 0x00, 0x12, 0x12, 0x12, 0x16, 0x0A, 0x00, // 0x75
        0x00, 0x00, 0x11, 0x11, 0x11, 0x0A, 0x04, 0x00, // 0x76
        0x00, 0x00, 0x11, 0x11, 0x15, 0x1F, 0x0A, 0x00, // 0x77
        0x00, 0x00, 0x12, 0x12, 0x0C, 0x12, 0x12, 0x00, // 0x78
        0x00, 0x00, 0x12, 0x12, 0x12, 0x0E, 0x04, 0x18, // 0x79
        0x00, 0x00, 0x1E, 0x02, 0x0C, 0x10, 0x1E, 0x00, // 0x7A
        0x06, 0x08, 0x08, 0x18, 0x08, 0x08, 0x06, 0x00, // 0x7B
        0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x00, // 0x7C
        0x0C, 0x02, 0x02, 0x03, 0x02, 0x02, 0x0C, 0x00, // 0x7D
        0x0A, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x7E
        0x04, 0x0E, 0x1B, 0x11, 0x11, 0x1F, 0x00, 0x00, // 0x7F
#ifndef FONT_END7F
        0x0E, 0x11, 0x10, 0x10, 0x11, 0x0E, 0x04, 0x0C, // 0x80
        0x12, 0x00, 0x12, 0x12, 0x12, 0x16, 0x0A, 0x00, // 0x81
        0x03, 0x00, 0x0E, 0x11, 0x1E, 0x10, 0x0E, 0x00, // 0x82
        0x0E, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F, 0x00, // 0x83
        0x0A, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F, 0x00, // 0x84
        0x0C, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F, 0x00, // 0x85
        0x0E, 0x0A, 0x0E, 0x01, 0x0F, 0x11, 0x0F, 0x00, // 0x86
        0x00, 0x0E, 0x11, 0x10, 0x11, 0x0E, 0x04, 0x0C, // 0x87
        0x0E, 0x00, 0x0E, 0x11, 0x1E, 0x10, 0x0E, 0x00, // 0x88
        0x0A, 0x00, 0x0E, 0x11, 0x1E, 0x10, 0x0E, 0x00, // 0x89
        0x0C, 0x00, 0x0E, 0x11, 0x1E, 0x10, 0x0E, 0x00, // 0x8A
        0x0A, 0x00, 0x04, 0x04, 0x04, 0x04, 0x06, 0x00, // 0x8B
        0x0E, 0x00, 0x04, 0x04, 0x04, 0x04, 0x06, 0x00, // 0x8C
        0x08, 0x00, 0x04, 0x04, 0x04, 0x04, 0x06, 0x00, // 0x8D
        0x0A, 0x00, 0x04, 0x0A, 0x11, 0x1F, 0x11, 0x00, // 0x8E
        0x0E, 0x0A, 0x0E, 0x1B, 0x11, 0x1F, 0x11, 0x00, // 0x8F
        0x03, 0x00, 0x1F, 0x10, 0x1E, 0x10, 0x1F, 0x00, // 0x90
        0x00, 0x00, 0x1E, 0x05, 0x1F, 0x14, 0x0F, 0x00, // 0x91
        0x0F, 0x14, 0x14, 0x1F, 0x14, 0x14, 0x17, 0x00, // 0x92
        0x0E, 0x00, 0x0C, 0x12, 0x12, 0x12, 0x0C, 0x00, // 0x93
        0x0A, 0x00, 0x0C, 0x12, 0x12, 0x12, 0x0C, 0x00, // 0x94
        0x18, 0x00, 0x0C, 0x12, 0x12, 0x12, 0x0C, 0x00, // 0x95
        0x0E, 0x00, 0x12, 0x12, 0x12, 0x16, 0x0A, 0x00, // 0x96
        0x18, 0x00, 0x12, 0x12, 0x12, 0x16, 0x0A, 0x00, // 0x97
        0x0A, 0x00, 0x12, 0x12, 0x12, 0x0E, 0x04, 0x18, // 0x98
        0x12, 0x0C, 0x12, 0x12, 0x12, 0x12, 0x0C, 0x00, // 0x99
        0x0A, 0x00, 0x12, 0x12, 0x12, 0x12, 0x0C, 0x00, // 0x9A
        0x00, 0x00, 0x01, 0x0E, 0x16, 0x1A, 0x1C, 0x20, // 0x9B
        0x06, 0x09, 0x08, 0x1E, 0x08, 0x09, 0x17, 0x00, // 0x9C
        0x0F, 0x13, 0x15, 0x15, 0x15, 0x19, 0x1E, 0x00, // 0x9D
        0x00, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x00, 0x00, // 0x9E
        0x02, 0x05, 0x04, 0x0E, 0x04, 0x04, 0x14, 0x08, // 0x9F
        0x06, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F, 0x00, // 0xA0
        0x06, 0x00, 0x04, 0x04, 0x04, 0x04, 0x06, 0x00, // 0xA1
        0x06, 0x00, 0x0C, 0x12, 0x12, 0x12, 0x0C, 0x00, // 0xA2
        0x06, 0x00, 0x12, 0x12, 0x12, 0x16, 0x0A, 0x00, // 0xA3
        0x0A, 0x14, 0x00, 0x1C, 0x12, 0x12, 0x12, 0x00, // 0xA4
        0x0A, 0x14, 0x00, 0x12, 0x1A, 0x16, 0x12, 0x00, // 0xA5
        0x0E, 0x01, 0x0F, 0x11, 0x0F, 0x00, 0x0F, 0x00, // 0xA6
        0x0C, 0x12, 0x12, 0x12, 0x0C, 0x00, 0x1E, 0x00, // 0xA7
        0x04, 0x00, 0x04, 0x0C, 0x10, 0x11, 0x0E, 0x00, // 0xA8
        0x1E, 0x25, 0x2B, 0x2D, 0x2B, 0x21, 0x1E, 0x00, // 0xA9
        0x00, 0x00, 0x3F, 0x01, 0x01, 0x00, 0x00, 0x00, // 0xAA
        0x10, 0x12, 0x14, 0x0E, 0x11, 0x02, 0x07, 0x00, // 0xAB
        0x10, 0x12, 0x14, 0x0B, 0x15, 0x07, 0x01, 0x00, // 0xAC
        0x04, 0x00, 0x04, 0x04, 0x0E, 0x0E, 0x04, 0x00, // 0xAD
        0x00, 0x00, 0x09, 0x12, 0x09, 0x00, 0x00, 0x00, // 0xAE
        0x00, 0x00, 0x12, 0x09, 0x12, 0x00, 0x00, 0x00, // 0xAF
        0x15, 0x00, 0x2A, 0x00, 0x15, 0x00, 0x2A, 0x00, // 0xB0
        0x15, 0x2A, 0x15, 0x2A, 0x15, 0x2A, 0x15, 0x2A, // 0xB1
        0x2A, 0x3F, 0x15, 0x3F, 0x2A, 0x3F, 0x15, 0x3F, // 0xB2
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, // 0xB3
        0x04, 0x04, 0x04, 0x3C, 0x04, 0x04, 0x04, 0x04, // 0xB4
        0x06, 0x00, 0x04, 0x0A, 0x11, 0x1F, 0x11, 0x00, // 0xB5
        0x0E, 0x00, 0x04, 0x0A, 0x11, 0x1F, 0x11, 0x00, // 0xB6
        0x0C, 0x00, 0x04, 0x0A, 0x11, 0x1F, 0x11, 0x00, // 0xB7
        0x1E, 0x21, 0x2D, 0x29, 0x2D, 0x21, 0x1E, 0x00, // 0xB8
        0x14, 0x34, 0x04, 0x34, 0x14, 0x14, 0x14, 0x14, // 0xB9
        0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, // 0xBA
        0x00, 0x3C, 0x04, 0x34, 0x14, 0x14, 0x14, 0x14, // 0xBB
        0x14, 0x34, 0x04, 0x3C, 0x00, 0x00, 0x00, 0x00, // 0xBC
        0x00, 0x04, 0x0E, 0x10, 0x10, 0x0E, 0x04, 0x00, // 0xBD
        0x11, 0x0A, 0x04, 0x1F, 0x04, 0x1F, 0x04, 0x00, // 0xBE
        0x00, 0x00, 0x00, 0x3C, 0x04, 0x04, 0x04, 0x04, // 0xBF
        0x04, 0x04, 0x04, 0x07, 0x00, 0x00, 0x00, 0x00, // 0xC0
        0x04, 0x04, 0x04, 0x3F, 0x00, 0x00, 0x00, 0x00, // 0xC1
        0x00, 0x00, 0x00, 0x3F, 0x04, 0x04, 0x04, 0x04, // 0xC2
        0x04, 0x04, 0x04, 0x07, 0x04, 0x04, 0x04, 0x04, // 0xC3
        0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, // 0xC4
        0x04, 0x04, 0x04, 0x3F, 0x04, 0x04, 0x04, 0x04, // 0xC5
        0x05, 0x0A, 0x0E, 0x01, 0x0F, 0x11, 0x0F, 0x00, // 0xC6
        0x05, 0x0A, 0x04, 0x0A, 0x11, 0x1F, 0x11, 0x00, // 0xC7
        0x14, 0x17, 0x10, 0x1F, 0x00, 0x00, 0x00, 0x00, // 0xC8
        0x00, 0x1F, 0x10, 0x17, 0x14, 0x14, 0x14, 0x14, // 0xC9
        0x14, 0x37, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, // 0xCA
        0x00, 0x3F, 0x00, 0x37, 0x14, 0x14, 0x14, 0x14, // 0xCB
        0x14, 0x17, 0x10, 0x17, 0x14, 0x14, 0x14, 0x14, // 0xCC
        0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, // 0xCD
        0x14, 0x37, 0x00, 0x37, 0x14, 0x14, 0x14, 0x14, // 0xCE
        0x11, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0x11, 0x00, // 0xCF
        0x0C, 0x10, 0x08, 0x04, 0x0E, 0x12, 0x0C, 0x00, // 0xD0
        0x0E, 0x09, 0x09, 0x1D, 0x09, 0x09, 0x0E, 0x00, // 0xD1
        0x0E, 0x00, 0x1F, 0x10, 0x1E, 0x10, 0x1F, 0x00, // 0xD2
        0x0A, 0x00, 0x1F, 0x10, 0x1E, 0x10, 0x1F, 0x00, // 0xD3
        0x0C, 0x00, 0x1F, 0x10, 0x1E, 0x10, 0x1F, 0x00, // 0xD4
        0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xD5
        0x06, 0x00, 0x0E, 0x04, 0x04, 0x04, 0x0E, 0x00, // 0xD6
        0x0E, 0x00, 0x0E, 0x04, 0x04, 0x04, 0x0E, 0x00, // 0xD7
        0x0A, 0x00, 0x0E, 0x04, 0x04, 0x04, 0x0E, 0x00, // 0xD8
        0x04, 0x04, 0x04, 0x3C, 0x00, 0x00, 0x00, 0x00, // 0xD9
        0x00, 0x00, 0x00, 0x07, 0x04, 0x04, 0x04, 0x04, // 0xDA
        0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, // 0xDB
        0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, // 0xDC
        0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x00, // 0xDD
        0x0C, 0x00, 0x0E, 0x04, 0x04, 0x04, 0x0E, 0x00, // 0xDE
        0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, // 0xDF
        0x06, 0x0C, 0x12, 0x12, 0x12, 0x12, 0x0C, 0x00, // 0xE0
        0x00, 0x1C, 0x12, 0x1C, 0x12, 0x12, 0x1C, 0x10, // 0xE1
        0x0E, 0x0C, 0x12, 0x12, 0x12, 0x12, 0x0C, 0x00, // 0xE2
        0x18, 0x0C, 0x12, 0x12, 0x12, 0x12, 0x0C, 0x00, // 0xE3
        0x0A, 0x14, 0x00, 0x0C, 0x12, 0x12, 0x0C, 0x00, // 0xE4
        0x0A, 0x14, 0x0C, 0x12, 0x12, 0x12, 0x0C, 0x00, // 0xE5
        0x00, 0x00, 0x12, 0x12, 0x12, 0x1C, 0x10, 0x10, // 0xE6
        0x00, 0x18, 0x10, 0x1C, 0x12, 0x1C, 0x10, 0x18, // 0xE7
        0x18, 0x10, 0x1C, 0x12, 0x12, 0x1C, 0x10, 0x18, // 0xE8
        0x06, 0x00, 0x12, 0x12, 0x12, 0x12, 0x0C, 0x00, // 0xE9
        0x0E, 0x00, 0x12, 0x12, 0x12, 0x12, 0x0C, 0x00, // 0xEA
        0x18, 0x00, 0x12, 0x12, 0x12, 0x12, 0x0C, 0x00, // 0xEB
        0x06, 0x00, 0x12, 0x12, 0x12, 0x0E, 0x04, 0x18, // 0xEC
        0x06, 0x00, 0x11, 0x0A, 0x04, 0x04, 0x04, 0x00, // 0xED
        0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xEE
        0x0C, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xEF
        0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, // 0xF0
        0x00, 0x04, 0x0E, 0x04, 0x00, 0x0E, 0x00, 0x00, // 0xF1
        0x00, 0x00, 0x1F, 0x00, 0x00, 0x1F, 0x00, 0x00, // 0xF2
        0x30, 0x1A, 0x34, 0x0B, 0x15, 0x07, 0x01, 0x00, // 0xF3
        0x0F, 0x15, 0x15, 0x0D, 0x05, 0x05, 0x05, 0x00, // 0xF4
        0x0E, 0x11, 0x0C, 0x0A, 0x06, 0x11, 0x0E, 0x00, // 0xF5
        0x00, 0x04, 0x00, 0x1F, 0x00, 0x04, 0x00, 0x00, // 0xF6
        0x00, 0x00, 0x00, 0x0E, 0x06, 0x00, 0x00, 0x00, // 0xF7
        0x0C, 0x12, 0x12, 0x0C, 0x00, 0x00, 0x00, 0x00, // 0xF8
        0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, // 0xF9
        0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, // 0xFA
        0x08, 0x18, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, // 0xFB
        0x1C, 0x08, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, // 0xFC
        0x18, 0x04, 0x08, 0x1C, 0x00, 0x00, 0x00, 0x00, // 0xFD
        0x00, 0x00, 0x1E, 0x1E, 0x1E, 0x1E, 0x00, 0x00, // 0xFE
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  // 0xFF
#endif
};

#define lcd_width 128
#define lcd_height 64

static int_least16_t drawChar(int_least16_t x, int_least16_t y, char c, uint_least16_t color, uint_least16_t bg, uint_least8_t size)
{
  int_least16_t ret, pos;
#if FONT_WIDTH <= 8
  uint_least8_t data, mask;
#elif FONT_WIDTH <= 16
  uint_least16_t data, mask;
#elif FONT_WIDTH <= 32
  uint_least32_t data, mask;
#endif
  uint_least8_t i, j, width, height;
  //const PROGMEM uint8_t *ptr;
  const uint8_t *ptr;

#if FONT_WIDTH <= 8
  pos = (c - FONT_START) * (8 * FONT_HEIGHT / 8);
#elif FONT_WIDTH <= 16
  pos = (c - FONT_START) * (16 * FONT_HEIGHT / 8);
#elif FONT_WIDTH <= 32
  pos = (c - FONT_START) * (32 * FONT_HEIGHT / 8);
#endif
  ptr = &font_PGM[pos];
  width = FONT_WIDTH;
  height = FONT_HEIGHT;
  size = size & 0x7F;

  if (size <= 1)
  {
    ret = x + width;
    if ((ret - 1) >= lcd_width)
    {
      return lcd_width + 1;
    }
    else if ((y + height - 1) >= lcd_height)
    {
      return lcd_width + 1;
    }

    //setArea(x, y, (x+width-1), (y+height-1));

    //drawStart();
    int xx = 0, yy = 0;
    for (; height != 0; height--)
    {
      // #if FONT_WIDTH <= 8
      //   data = pgm_read_byte(ptr); ptr+=1;
      data = *ptr;
      ptr += 1;
      // #elif FONT_WIDTH <= 16
      //       data = pgm_read_word(ptr); ptr+=2;
      // #elif FONT_WIDTH <= 32
      //       data = pgm_read_dword(ptr); ptr+=4;
      // #endif
      for (mask = (1 << (width - 1)); mask != 0; mask >>= 1)
      {
        if (data & mask)
        {
          //draw(color);
          __DrawPixel(x + xx, y + yy, color);
        }
        else
        {
          //draw(bg);
          // not for now as real SSD1306 does
          // __DrawPixel(x + xx, y + yy, bg);
        }
        xx++;
      }
      yy++;
      xx = 0;
    }
    //drawStop();
  }
  //   else
  //   {
  //     ret = x+(width*size);
  //     if((ret-1) >= lcd_width)
  //     {
  //       return lcd_width+1;
  //     }
  //     else if((y+(height*size)-1) >= lcd_height)
  //     {
  //       return lcd_width+1;
  //     }

  //     setArea(x, y, (x+(width*size)-1), (y+(height*size)-1));

  //     drawStart();
  //     for(; height!=0; height--)
  //     {
  // #if FONT_WIDTH <= 8
  //       data = pgm_read_byte(ptr); ptr+=1;
  // #elif FONT_WIDTH <= 16
  //       data = pgm_read_word(ptr); ptr+=2;
  // #elif FONT_WIDTH <= 32
  //       data = pgm_read_dword(ptr); ptr+=4;
  // #endif
  //       for(i=size; i!=0; i--)
  //       {
  //         for(mask=(1<<(width-1)); mask!=0; mask>>=1)
  //         {
  //           if(data & mask)
  //           {
  //             for(j=size; j!=0; j--)
  //             {
  //               draw(color);
  //             }
  //           }
  //           else
  //           {
  //             for(j=size; j!=0; j--)
  //             {
  //               draw(bg);
  //             }
  //           }
  //         }
  //       }
  //     }
  //     //drawStop();
  //   }

  return ret;
}

static void DrawChar(char c, uint8 x, uint8 y, uint8 brightness)
{
  drawChar(x, y, c, 1, 0, 1);
}

#endif